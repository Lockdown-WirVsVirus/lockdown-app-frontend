// tslint:disable
/**
 * SafeTicket tickets api
 * the tickets api of project SafeTicket
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    street: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    houseNumber: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    zipCode: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    country: string;
}
/**
 *
 * @export
 * @interface TicketRequestDto
 */
export interface TicketRequestDto {
    /**
     *
     * @type {string}
     * @memberof TicketRequestDto
     */
    passportId: string;
    /**
     *
     * @type {string}
     * @memberof TicketRequestDto
     */
    reason: string;
    /**
     *
     * @type {Address}
     * @memberof TicketRequestDto
     */
    startAddress: Address;
    /**
     *
     * @type {Address}
     * @memberof TicketRequestDto
     */
    endAddress: Address;
    /**
     *
     * @type {Date}
     * @memberof TicketRequestDto
     */
    validFromDateTime: Date;
    /**
     *
     * @type {Date}
     * @memberof TicketRequestDto
     */
    validToDateTime: Date;
}
/**
 *
 * @export
 * @interface TicketResponseDto
 */
export interface TicketResponseDto {
    /**
     *
     * @type {string}
     * @memberof TicketResponseDto
     */
    ticketId: string;
    /**
     *
     * @type {string}
     * @memberof TicketResponseDto
     */
    hashedPassportId: string;
    /**
     *
     * @type {string}
     * @memberof TicketResponseDto
     */
    reason: string;
    /**
     *
     * @type {Address}
     * @memberof TicketResponseDto
     */
    startAddress: Address;
    /**
     *
     * @type {Address}
     * @memberof TicketResponseDto
     */
    endAddress: Address;
    /**
     *
     * @type {Date}
     * @memberof TicketResponseDto
     */
    validFromDateTime: Date;
    /**
     *
     * @type {Date}
     * @memberof TicketResponseDto
     */
    validToDateTime: Date;
    /**
     *
     * @type {object}
     * @memberof TicketResponseDto
     */
    ticketStatus: object;
}

/**
 * TicketApi - axios parameter creator
 * @export
 */
export const TicketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {TicketRequestDto} TicketRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicket(TicketRequestDto: TicketRequestDto, options: any = {}): RequestArgs {
            // verify required parameter 'TicketRequestDto' is not null or undefined
            if (TicketRequestDto === null || TicketRequestDto === undefined) {
                throw new RequiredError('TicketRequestDto','Required parameter TicketRequestDto was null or undefined when calling ticketsControllerCreateTicket.');
            }
            const localVarPath = `/api/v1/tickets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof TicketRequestDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(TicketRequestDto !== undefined ? TicketRequestDto : {}) : (TicketRequestDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} ticketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerTicketIdRessource(ticketId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ticketId' is not null or undefined
            if (ticketId === null || ticketId === undefined) {
                throw new RequiredError('ticketId','Required parameter ticketId was null or undefined when calling ticketsControllerTicketIdRessource.');
            }
            const localVarPath = `/api/v1/tickets/{ticketId}`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketApi - functional programming interface
 * @export
 */
export const TicketApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @param {TicketRequestDto} TicketRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicket(TicketRequestDto: TicketRequestDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketResponseDto> {
            const localVarAxiosArgs = TicketApiAxiosParamCreator(configuration).ticketsControllerCreateTicket(TicketRequestDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} ticketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerTicketIdRessource(ticketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketResponseDto> {
            const localVarAxiosArgs = TicketApiAxiosParamCreator(configuration).ticketsControllerTicketIdRessource(ticketId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TicketApi - factory interface
 * @export
 */
export const TicketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {TicketRequestDto} TicketRequestDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerCreateTicket(TicketRequestDto: TicketRequestDto, options?: any): AxiosPromise<TicketResponseDto> {
            return TicketApiFp(configuration).ticketsControllerCreateTicket(TicketRequestDto, options)(axios, basePath);
        },
        /**
         *
         * @param {string} ticketId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsControllerTicketIdRessource(ticketId: string, options?: any): AxiosPromise<TicketResponseDto> {
            return TicketApiFp(configuration).ticketsControllerTicketIdRessource(ticketId, options)(axios, basePath);
        },
    };
};

/**
 * TicketApi - object-oriented interface
 * @export
 * @class TicketApi
 * @extends {BaseAPI}
 */
export class TicketApi extends BaseAPI {
    /**
     *
     * @param {TicketRequestDto} TicketRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public ticketsControllerCreateTicket(TicketRequestDto: TicketRequestDto, options?: any) {
        return TicketApiFp(this.configuration).ticketsControllerCreateTicket(TicketRequestDto, options)(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} ticketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApi
     */
    public ticketsControllerTicketIdRessource(ticketId: string, options?: any) {
        return TicketApiFp(this.configuration).ticketsControllerTicketIdRessource(ticketId, options)(this.axios, this.basePath);
    }

}


